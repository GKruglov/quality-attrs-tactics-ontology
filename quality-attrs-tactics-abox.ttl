@prefix : <https://gkruglov.github.io/quality-attrs-tactics-ontology/ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

### --- Импорт TBox ---
<> owl:imports <https://raw.githubusercontent.com/GKruglov/quality-attrs-tactics-ontology/main/quality-attrs-tactics-tbox.ttl> .


### ----------------------------------------
### Экземпляры тактик обнаружения сбоев (ABox)s
### ----------------------------------------

### --- Тактики ---
:Monitor a :Tactic ;
    rdfs:label "Монитор";
    rdfs:comment "Компонент, отслеживающий состояние работоспособности других частей системы (процессоры, процессы, ввод/вывод, память и т. д.).";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Система должна предоставлять метрики и данные о состоянии компонентов";
    :hasConsequences "Увеличение нагрузки на систему из-за сбора и анализа данных, сложность настройки и интерпретации результатов";
    :relatedTactic :Heartbeat, :PingEcho, :SelfTest .

:PingEcho a :Tactic ;
    rdfs:label "Ping/Echo";
    rdfs:comment "Обмен асинхронной парой запрос/ответ между узлами для определения достижимости и задержки в сети.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Сеть должна поддерживать обмен сообщениями, требуется определение тайм-аута";
    :hasConsequences "Ложные срабатывания при временных задержках в сети, дополнительный трафик";
    :relatedTactic :Monitor .

:Heartbeat a :Tactic ;
    rdfs:label "Heartbeat";
    rdfs:comment "Периодический обмен сообщениями между монитором системы и отслеживаемым процессом.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Требуется синхронизация между монитором и процессом, необходимость обработки пропущенных сердцебиений";
    :hasConsequences "Нагрузка на сеть и процессор, сложность определения оптимального интервала сердцебиений";
    :relatedTactic :Monitor .

:Timestamp a :Tactic ;
    rdfs:label "Timestamp" ;
    rdfs:comment "Тактика временных меток используется для обнаружения неправильных последовательностей событий, в основном в распределенных системах обмена сообщениями. Временная метка события может быть установлена путем присвоения событию состояния локальных часов сразу после его возникновения. Порядковые номера также могут использоваться для этой цели, поскольку временные метки в распределенной системе могут быть несогласованными на разных процессорах." ;
    :belongsToCategory :FaultDetectionTactics, :UnsafeStateDetectionTactics ;
    :hasApplicabilityConditions "Система должна обеспечивать механизмы для генерации и сравнения временных меток или порядковых номеров" ;
    :hasConsequences "Сложность синхронизации времени в распределенных системах, накладные расходы на генерацию и обработку меток" ;
    :relatedTactic :ConditionMonitoring .

:ConditionMonitoring a :Tactic ;
    rdfs:label "Condition Monitoring" ;
    rdfs:comment "Эта тактика включает проверку условий в процессе или устройстве, или проверку допущений, сделанных во время проектирования, возможно, с использованием утверждений (assertions). Мониторинг состояния выявляет состояния системы, которые могут привести к опасному поведению. Однако монитор должен быть простым (и, в идеале, доказуемым), чтобы не вносить новых программных ошибок и не увеличивать значительно общую рабочую нагрузку. Мониторинг состояния предоставляет входные данные для предиктивной модели и для проверки на адекватность (sanity checking)." ;
    :belongsToCategory :FaultDetectionTactics, :UnsafeStateDetectionTactics ;
    :hasApplicabilityConditions "Необходимость определения проверяемых условий и метрик, возможность автоматизированной проверки" ;
    :hasConsequences "Сложность определения исчерпывающего набора условий, риск пропустить важные проблемы" ;
    :relatedTactic :SanityChecking, :Timestamp .

:SanityChecking a :Tactic ;
    rdfs:label "Sanity Checking" ;
    rdfs:comment "Тактика проверки на адекватность (sanity checking) проверяет достоверность или разумность результатов конкретных операций, либо входных или выходных данных компонента. Эта тактика обычно основана на знании внутреннего устройства, состояния системы или характера проверяемой информации. Чаще всего она применяется на интерфейсах для проверки конкретного потока информации." ;
    :belongsToCategory :FaultDetectionTactics, :UnsafeStateDetectionTactics ;
    :hasApplicabilityConditions "Требуется знание ожидаемых значений и ограничений, возможность автоматизированной проверки" ;
    :hasConsequences "Ограниченная область применения, возможность пропустить сложные или неочевидные ошибки" ;
    :relatedTactic :ConditionMonitoring .

:Voting a :Tactic ;
    rdfs:label "Voting";
    rdfs:comment "Сравнение результатов вычислений из нескольких источников и выбор результатов для использования.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Необходимость наличия нескольких независимых источников данных, алгоритм голосования";
    :hasConsequences "Увеличение сложности и стоимости системы, необходимость обработки расхождений в данных";
    :relatedTactic :Replication, :FunctionalRedundancy, :AnalyticRedundancy .

:ExceptionDetection a :Tactic ;
    rdfs:label "Exception Detection";
    rdfs:comment "Обнаружение условия системы, которое изменяет нормальный поток выполнения.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Система должна поддерживать механизм исключений, определение типов исключений";
    :hasConsequences "Сложность обработки всех возможных исключений, влияние на производительность при частом возникновении исключений";
    :relatedTactic :SystemExceptions, :ParameterFence, :ParameterTyping, :Timeout .

:SelfTest a :Tactic ;
    rdfs:label "Self-Test";
    rdfs:comment "Процедуры самотестирования компонентов или подсистем для проверки правильности работы.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Возможность реализации автоматизированных тестов, определение критериев успешного прохождения";
    :hasConsequences "Увеличение сложности разработки и сопровождения, ограниченный охват (не все проблемы могут быть выявлены)";
    :relatedTactic :ConditionMonitoring .

:Comparison a :Tactic ;
    rdfs:label "Comparison" ;
    rdfs:comment "Тактика сравнения позволяет системе обнаруживать небезопасные состояния путем сравнения выходных данных, произведенных несколькими синхронизированными или реплицированными элементами. Таким образом, тактика сравнения работает совместно с тактикой избыточности, обычно с тактикой активной избыточности, представленной при обсуждении доступности. Когда количество реплик равно трем или более, тактика сравнения может не только обнаружить небезопасное состояние, но и указать, какой компонент к нему привел. Сравнение связано с тактикой голосования, используемой для обеспечения доступности. Однако сравнение не всегда может приводить к голосованию; другой вариант — простое отключение системы в случае расхождения выходных данных." ;
    :belongsToCategory :UnsafeStateDetectionTactics ;
    # :hasApplicabilityConditions "..." ; # Можно добавить, если есть информация
    # :hasConsequences "..." ; # Можно добавить, если есть информация
    :relatedTactic :Voting .

:SystemExceptions a :Tactic ;
    rdfs:label "System Exceptions";
    rdfs:comment "Исключения, зависящие от архитектуры процессора (например, деление на ноль).";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Зависит от используемой аппаратной архитектуры";
    :hasConsequences "Требует обработки на уровне операционной системы или оборудования";
    :relatedTactic :ExceptionDetection .

:ParameterTyping a :Tactic ;
    rdfs:label "Parameter Typing";
    rdfs:comment "Обеспечение согласованности типов параметров сообщений между отправителем и получателем.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Применимо к системам обмена сообщениями";
    :hasConsequences "Усложнение структуры сообщений и обработки параметров";
    :relatedTactic :ExceptionDetection .

:Timeout a :Tactic ;
    rdfs:label "Timeout";
    rdfs:comment "Генерация исключения при несоблюдении временных ограничений.";
    :belongsToCategory :FaultDetectionTactics ;
    :hasApplicabilityConditions "Требуется определение временных ограничений";
    :hasConsequences "Возможны ложные срабатывания, сложность определения оптимальных тайм-аутов";
    :relatedTactic :ExceptionDetection .

:Comparison a :Tactic ;
    rdfs:label "Comparison" ;
    rdfs:comment "Тактика сравнения позволяет системе обнаруживать небезопасные состояния путем сравнения выходных данных, произведенных несколькими синхронизированными или реплицированными элементами. Таким образом, тактика сравнения работает совместно с тактикой избыточности, обычно с тактикой активной избыточности, представленной при обсуждении доступности. Когда количество реплик равно трем или более, тактика сравнения может не только обнаружить небезопасное состояние, но и указать, какой компонент к нему привел. Сравнение связано с тактикой голосования, используемой для обеспечения доступности. Однако сравнение не всегда может приводить к голосованию; другой вариант — простое отключение системы в случае расхождения выходных данных." ;
    :belongsToCategory :UnsafeStateDetectionTactics ;
    :hasApplicabilityConditions "Требуется наличие нескольких (минимум двух) избыточных компонентов, выполняющих идентичные операции и синхронизированных для получения сопоставимых выходных данных. Необходим механизм сравнения этих данных и логика для определения расхождений." ;
    :hasConsequences "Увеличение потребления ресурсов (вычислительных, памяти) и сложности системы из-за необходимости репликации компонентов и их синхронизации. Возможны накладные расходы на производительность из-за процесса сравнения. Повышается способность к обнаружению сбоев в реальном времени, но требуется четко определенная стратегия реагирования на выявленные расхождения (например, переход в безопасное состояние, оповещение, использование механизма голосования)." ;
    :relatedTactic :Voting .

:Replication a :Tactic ;
    rdfs:label "Replication" ;
    rdfs:comment "Репликация — это простейшая тактика избыточности, поскольку она просто включает наличие копий компонента. Наличие нескольких копий идентичных компонентов может быть эффективным для защиты от случайных аппаратных сбоев, но не может защитить от ошибок проектирования или реализации в аппаратном или программном обеспечении, так как в этой тактике отсутствует какая-либо форма разнообразия." ;
    :belongsToCategory :RedundancyTactics ;
    :hasApplicabilityConditions "Возможность создания идентичных копий (клонов) компонента. Наличие механизма обнаружения отказов реплик и переключения на рабочую (или параллельного использования с сравнением/голосованием). Достаточность ресурсов для размещения и управления репликами. Компоненты должны быть преимущественно без сохранения состояния или иметь надежный механизм синхронизации состояния." ;
    :hasConsequences "Увеличение потребления ресурсов (аппаратных, лицензионных, энергетических, пространственных). Повышенная сложность развертывания и управления (например, обеспечение согласованности реплик при обновлениях). Не защищает от систематических ошибок (ошибок проектирования, общих программных дефектов), так как реплики идентичны. Повышение доступности и отказоустойчивости к случайным сбоям. Возможность увеличения пропускной способности при распределении нагрузки между репликами." ;
    :relatedTactic :Voting .

:FunctionalRedundancy a :Tactic ;
    rdfs:label "Functional Redundancy" ;
    rdfs:comment "Функциональная избыточность предназначена для решения проблемы отказов по общей для копий причине (когда копии демонстрируют один и тот же сбой одновременно из-за общей реализации) в аппаратных или программных компонентах путем внедрения разнообразия в проектировании. Эта тактика пытается справиться с систематическим характером проектных ошибок, добавляя разнообразие к избыточности. Выходные данные функционально избыточных компонентов должны быть одинаковыми при одинаковых входных данных. Однако тактика функциональной избыточности все еще уязвима для ошибок спецификации, и, конечно, функциональные реплики будут дороже в разработке и проверке." ;
    :belongsToCategory :RedundancyTactics ;
    :hasApplicabilityConditions "Возможность разработки нескольких независимых реализаций (разнообразие проектирования) для одной и той же функциональной спецификации. Четкая и однозначная функциональная спецификация для обеспечения эквивалентности корректных результатов от всех разнородных реализаций. Механизм для параллельного или последовательного запуска разнородных реализаций и сравнения/голосования по их результатам. Требуются значительные усилия и экспертиза для разработки разнородных реализаций." ;
    :hasConsequences "Значительное увеличение затрат на разработку, тестирование и верификацию из-за нескольких разнородных реализаций. Повышенная устойчивость к отказам по общей причине, возникающим из-за ошибок проектирования или реализации в одной из версий. Уязвимость к ошибкам в общей спецификации. Сложность управления и синхронизации разнородных версий. Возможные накладные расходы на производительность. Требуется логика принятия решений при расхождениях между результатами разнородных версий." ;
    :relatedTactic :Voting .

:AnalyticRedundancy a :Tactic ;
    rdfs:label "Analytic Redundancy" ;
    rdfs:comment "Тактика аналитической избыточности допускает не только разнообразие реализации компонентов, но и разнообразие более высокого уровня, видимое на уровне входов и выходов. Как следствие, она может переносить ошибки спецификации за счет использования отдельных спецификаций требований. Аналитическая избыточность часто включает разделение системы на части с высокой степенью гарантированности и высокой производительностью (низкой степенью гарантированности). Часть с высокой степенью гарантированности проектируется простой и надежной, тогда как часть с высокой производительностью обычно проектируется более сложной и точной, но менее стабильной: она изменяется быстрее и может быть не такой надежной, как часть с высокой степенью гарантированности. (Следовательно, здесь мы не имеем в виду высокую производительность в смысле задержки или пропускной способности; скорее, эта часть «выполняет» свою задачу лучше, чем часть с высокой степенью гарантированности.)" ;
    :belongsToCategory :RedundancyTactics ;
    :hasApplicabilityConditions "Возможность использования различных физических или аналитических принципов для определения одинаковых или связанных параметров системы. Наличие разнообразных источников данных или датчиков. Существование математических моделей или алгоритмов, способных выводить требуемую информацию из альтернативных входных данных. Часто применима в системах управления или системах, где физические свойства могут быть измерены или оценены несколькими способами. Может требовать разделения системы на компоненты с высокой степенью гарантированности и компоненты с высокой производительностью/точностью." ;
    :hasConsequences "Способность переносить отказы некоторых датчиков или источников данных, полагаясь на другие. Потенциальная возможность обнаруживать и смягчать даже ошибки спецификаций, если различные компоненты основаны на действительно независимых интерпретациях требований или физических принципах. Высокая сложность проектирования, реализации и валидации, особенно для задействованных моделей и алгоритмов. Точность и надежность аналитически выведенных значений зависят от качества моделей и альтернативных источников данных. Возможное увеличение вычислительной нагрузки. Требует тщательного управления взаимодействием между частями с высокой степенью гарантированности и высокой производительностью." ;
    :relatedTactic :Voting .